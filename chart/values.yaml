# Values for configuring the deployment of TimescaleDB
# The charts README is at: 
#    https://github.com/timescale/timescaledb-kubernetes/tree/master/charts/timescaledb-single
# Check out the various configuration options (administration guide) at: 
#    https://github.com/timescale/timescaledb-kubernetes/blob/master/charts/timescaledb-single/admin-guide.md
timescaledb-single:
  loadBalancer: 
    enabled: false
  # disable the chart if an existing TimescaleDB instance is used
  enabled: true
  # number or TimescaleDB pods to spawn (default is 3, 1 for no HA)
  replicaCount: 1
  nodeSelector:
    type: db
  timescaledbTune:
    enabled: false
  resources:
    requests:
      cpu: 1
      memory: 2Gi
    limits:
      cpu: 1.5
      memory: 3Gi
  persistentVolumes:
    data:
      size: 30G
    wal:
      size: 15G

# Values for configuring the deployment of the Timescale Prometheus Connector
# The charts README is at:
#   https://github.com/timescale/prometheus-postgresql-adapter-private/tree/series-schema/helm-chart
#   TODO: Change this link before publishing
timescale-prometheus:
  nodeSelector:
    type: conn
  # TODO: change to public docker image
  image: delixd/timescale-prometheus:0402
  enabled: true
  # connection options
  connection:
    # user to connect to TimescaleDB with
    user: postgres
    # A secret containing the password for the user used 
    # to connect to the database needs to be created before 
    # installing the chart
    passwordSecret: "ts-obv-timescaledb-passwords"
    # db host by default configured to "{{ .Release.Name }}.default.svc.cluster.local"
    # use:
    # host:
    #  nameTemplate: "{{ .Release.Name }}.default.svc.cluster.local"
    # to change host name by setting either a template or a string
  
  # configuration options for the service exposed by timescale-prometheus
  service:
    # port must be passed as string because the prometheus-config-map 
    # created in this chart can properly set the url for the remote_write endpoint
    port: "9201"
    # we disable the load balancer by default, only a ClusterIP service
    # will get created
    loadBalancer:
      enabled: false    
  resources:
    requests:
      # By default this should be enough for a cluster 
      # with only a few pods
      memory: 3Gi
      cpu: 1
  # configuration options for the prometheus remote_write
  # these options are not used by the timescale-prometheus chart
  # but by this one
  remote:
    enabled: true
    # queue config 
    # see: https://prometheus.io/docs/practices/remote_write/
    queue:
      minShards: 10
      capacity: 3000
      maxSamplesPerSend: 1000
      batchSendDeadline: "10s"
      minBackoff: "500ms"
      maxBackoff: "2s"
# Values for configuring the deployment of Prometheus
# The stable/prometheus chart is used and the guide for it
# can be found at: 
#   https://hub.helm.sh/charts/stable/prometheus
prometheus:
  enabled: true
  alertmanager:
    enabled: false
  pushgateway:
    nodeSelector: 
      type: tools
  server:
    nodeSelector: 
      type: tools
    configMapOverrideName: "prometheus-config"
  
